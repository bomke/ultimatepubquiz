{"version":3,"sources":["helpers.ts","components/header.tsx","colors.ts","round-context.ts","components/button.tsx","components/add-player.tsx","components/greeting.tsx","components/player.tsx","components/question.tsx","components/timer.tsx","components/timer-control.tsx","components/pubquiz.tsx","components/quiz-loader.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["shuffle","a","i","length","j","Math","floor","random","Header","styled","header","Title","h1","AppHeader","title","subtitles","useState","subtitle","setSubtitle","useEffect","timeout","setTimeout","otherSubtitles","filter","st","clearTimeout","RoundContext","React","createContext","Button","button","PrimaryButton","RoundButton","AddPopupContainer","div","AddPopupContent","NameLabel","span","ImageLabel","Input","input","NameInput","ImageInput","AddButton","AddPlayerButton","addPlayer","isPopupOpen","setPopupOpen","name","setName","url","setUrl","onClick","value","onChange","e","target","imageUrl","score","Image","img","Greeting","greeting","preImageText","dangerouslySetInnerHTML","__html","image","src","postImageText","PlayerControls","PlayerContainer","marked","RoundImage","PlayerStats","PlayerName","PlayerScore","PlayerDisplay","player","incrementScore","decrementScore","useContext","modifiedThisRound","QuestionRenderer","question","startCountdown","audioRef","useRef","isPlaying","setPlaying","isPlayingFirstTime","setPlayingFirstTime","audio","current","currentTime","startTime","play","playTime","pause","questionHeader","questionText","optionsValues","map","val","key","questionEndText","ref","onCanPlayThrough","type","disabled","Svg","svg","Circle","circle","circumference","offset","blink","keyframes","DoneCircle","Text","text","Timer","remaining","total","PI","r","cx","cy","xmlns","viewBox","x","y","alignmentBaseline","dominantBaseline","TimerControl","countdownFrom","remainingTime","setRemainingTime","timer","setInterval","rt","clearInterval","TimerContent","NavContent","PlayerContent","MainContent","PubQuiz","quiz","round","setRound","playersStringFromLocalStorage","window","localStorage","getItem","JSON","parse","console","error","loadPlayers","players","setPlayers","undefined","setCountdownFrom","modifyScore","diff","sortedPlayers","sort","b","setItem","stringify","Provider","ps","newPlayers","forEach","p","questions","style","overflow","maxHeight","timerCountdown","LoaderContainer","LoaderBox","dragging","StatusMessage","QuizLoader","loadedQuiz","onDrop","useCallback","acceptedFiles","file","reader","FileReader","onabort","log","setMessage","onerror","onload","jsonString","result","readAsText","useDropzone","getRootProps","getInputProps","isDragActive","message","MainGrid","App","setQuiz","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c010a88e.chunk.js","sourcesContent":["export function shuffle(a: any[]):any[] {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { brandColor, brandColorText } from \"../colors\";\nimport { shuffle } from \"../helpers\";\n\n\n\n\ninterface IAppHeaderProps {\n  title: string;\n  subtitles: string[];\n}\n\nconst Header = styled.header`\n  grid-column-start: 1;\n  grid-column-end: 4;\n  background-color: ${brandColor};\n  color: ${brandColorText};\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Title = styled.h1`\nmargin: 0;\n`\n\nexport const AppHeader: React.FC<IAppHeaderProps> = ({ title, subtitles }) => {\n\n  const [subtitle, setSubtitle] = useState(subtitles[0]);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n        const otherSubtitles = subtitles.filter(st => st !== subtitle);\n        setSubtitle(shuffle(otherSubtitles)[0]);\n    }, 60_000 + Math.random() * 300_000);\n    return () => clearTimeout(timeout);\n  })\n\n  return (\n    <Header>\n      <Title>{title}</Title>\n      <span>{subtitle}</span>\n    </Header>\n  );\n};","\nexport const brandColor = \"#003869\";\nexport const brandColorText = \"white\";\nexport const grey = \"#f2f2f2\";","import React from \"react\";\n\nexport const RoundContext = React.createContext(-1);","import styled from \"styled-components\";\nimport { brandColor, brandColorText, grey } from \"../colors\";\n\nexport const Button = styled.button`\n  margin: 0;\n  border: 0;\n  border-radius: 20px;\n  background-color: ${grey};\n  height: 40px;\n  min-width: 100px;\n  padding: 0 15px;\n  cursor: pointer;\n  :hover {\n    filter: brightness(90%);\n  }\n`;\n\nexport const PrimaryButton = styled(Button)`\n  background-color: ${brandColor};\n  color: ${brandColorText};\n`;\n\nexport const RoundButton = styled.button`\n  background-color: white;\n  border: none;\n  text-align: center;\n  padding: 5px;\n  text-decoration: none;\n  font-size: 14px;\n  display: inline-block;\n  transition: background-color linear 200ms;\n  border-radius: 50%;\n  cursor: pointer;\n\n  :hover {\n      background-color: ${grey};\n  }\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Player } from \"../models\";\nimport { PrimaryButton } from \"./button\";\n\ninterface IAddPlayerButtonProps {\n  addPlayer: (player: Player) => void;\n}\n\nconst AddPopupContainer = styled.div`\n  width: 420px;\n  height: 190px;\n  background-color: white;\n  border-radius: 10px;\n  left: 50%;\n  top: 50%;\n  margin-left: -210px;\n  margin-top: -85px;\n  position: absolute;\n  box-shadow: 10px 10px 30px 0px rgba(0, 0, 0, 0.25);\n`;\n\nconst AddPopupContent = styled.div`\n  padding: 10px;\n  display: grid;\n  grid-template-columns: 80px 300px;\n  grid-template-rows: 50px 50px 50px;\n  row-gap: 10px;\n  column-gap: 20px;\n  grid-template-areas:\n    \"name-label name-input\"\n    \"image-label image-input\"\n    \"add-button add-button\";\n`;\n\nconst NameLabel = styled.span`\n  grid-area: name-label;\n  place-self: center end;\n`;\n\nconst ImageLabel = styled.span`\n  grid-area: image-label;\n  place-self: center end;\n`;\n\nconst Input = styled.input`\n  height: 30px;\n  border-radius: 25px;\n  border: 1px solid lightgrey;\n  padding: 10px;\n`;\n\nconst NameInput = styled(Input)`\n  grid-area: name-input;\n  \n`;\n\nconst ImageInput = styled(Input)`\n  grid-area: image-input;\n`;\n\nconst AddButton = styled(PrimaryButton)`\n  grid-area: add-button;\n`;\n\nconst AddPlayerButton: React.FC<IAddPlayerButtonProps> = ({addPlayer}) => {\n  const [isPopupOpen, setPopupOpen] = useState(false);\n\n  const [name, setName] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n\n  const add = () => {\n    addPlayer({\n      name,\n      imageUrl: url,\n      score: 0\n    });\n    setName(\"\");\n    setUrl(\"\");\n    setPopupOpen(false);\n  }\n\n  return (\n    <>\n      <PrimaryButton onClick={() => setPopupOpen(!isPopupOpen)}>\n        {isPopupOpen ? \"Abbrechen\" : \"Neuer Spieler\"}\n      </PrimaryButton>\n      {isPopupOpen && (\n        <AddPopupContainer>\n          <AddPopupContent>\n            <NameLabel>Name:</NameLabel>\n            <ImageLabel>Bild-URL:</ImageLabel>\n            <NameInput value={name} onChange={(e) => setName(e.target.value)}></NameInput>\n            <ImageInput value={url} onChange={(e) => setUrl(e.target.value)}></ImageInput>\n            <AddButton onClick={add}>Hinzufügen</AddButton>\n          </AddPopupContent>\n        </AddPopupContainer>\n      )}\n    </>\n  );\n};\n\nexport default AddPlayerButton;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { QuizGreeting } from \"../models\";\n\nconst Image = styled.img`\n    max-height: 50vh;\n    max-width: calc(100vw - 300px);\n    min-width: 50vw;\n`;\n\nconst Greeting: React.FC<QuizGreeting> = (greeting) => {\n\n    return <>\n        <h1>{greeting.title}</h1>\n        {greeting.preImageText && <p dangerouslySetInnerHTML={{__html: greeting.preImageText}}></p>}\n        {greeting.image && <Image src={greeting.image}></Image>}\n        {greeting.postImageText && <p dangerouslySetInnerHTML={{__html: greeting.postImageText}}></p>}\n    </>\n}\n\nexport default Greeting;","import React, { useContext, useEffect, useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Player } from \"../models\";\nimport { RoundContext } from \"../round-context\";\nimport { RoundButton } from \"./button\";\n\nconst PlayerControls = styled.div`\n  display: grid;\n  grid-template-rows: 50% 50%;\n  grid-template-columns: 100%;\n  visibility: hidden;\n`;\n\nconst PlayerContainer = styled.div<{ marked: boolean }>`\n  padding: 10px 0;\n  display: grid;\n  grid-template-rows: 60px;\n  grid-template-columns: 60px 1fr 30px;\n  column-gap: 10px;\n\n  background-color: ${({ marked }) => (marked ? \"lightyellow\" : \"white\")};\n\n  :hover ${PlayerControls} {\n    visibility: visible;\n  }\n`;\n\nconst RoundImage = styled.img`\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n`;\n\nconst PlayerStats = styled.div`\n  display: grid;\n  grid-template-rows: 60% 40%;\n  grid-template-columns: 100%;\n`;\n\nconst PlayerName = styled.span`\n  font-size: 14pt;\n  place-self: start start;\n`;\n\nconst PlayerScore = styled.span`\n  font-size: 12pt;\n  place-self: end start;\n`;\n\ninterface IPlayerDisplayProps {\n  player: Player;\n  incrementScore: () => void;\n  decrementScore: () => void;\n}\n\nconst PlayerDisplay: React.FC<IPlayerDisplayProps> = ({\n  player,\n  incrementScore,\n  decrementScore,\n}) => {\n  const round = useContext(RoundContext);\n\n  const increment = () => {\n    incrementScore();\n\n  };\n\n  const decrement = () => {\n    decrementScore();\n\n  };\n\n  return (\n    <PlayerContainer marked={!!player.modifiedThisRound}>\n      <RoundImage src={player.imageUrl}></RoundImage>\n      <PlayerStats>\n        <PlayerName>\n          {player.name}\n        </PlayerName>\n        <PlayerScore>{player.score} Punkte</PlayerScore>\n      </PlayerStats>\n      <PlayerControls>\n        <RoundButton onClick={increment}>+</RoundButton>\n        <RoundButton onClick={decrement}>&minus;</RoundButton>\n      </PlayerControls>\n    </PlayerContainer>\n  );\n};\n\nexport default PlayerDisplay;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { shuffle } from \"../helpers\";\nimport { Question } from \"../models\";\nimport { Button } from \"./button\";\n\nconst Image = styled.img`\n  max-height: 50vh;\n  max-width: calc(100vw - 310px);\n  min-width: 10vw;\n  margin: 5px;\n`;\n\ninterface IQuestionRendererProps {\n  question: Question;\n  startCountdown: () => void;\n}\n\nconst QuestionRenderer: React.FC<IQuestionRendererProps> = ({\n  question,\n  startCountdown,\n}) => {\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  const [isPlaying, setPlaying] = useState(false);\n  const [isPlayingFirstTime, setPlayingFirstTime] = useState(true);\n\n  useEffect(() => {\n    if (!question.audio) {\n      startCountdown();\n    }\n  });\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (!audioRef?.current) {\n        return;\n      }\n      audioRef.current.currentTime = question.audio?.startTime || 0;\n      audioRef.current.play();\n      setPlayingFirstTime(false);\n      if (question.audio?.playTime) {\n        const timeout = setTimeout(() => {\n          audioRef.current?.pause();\n          setPlaying(false);\n          if (!isPlayingFirstTime) {\n            startCountdown();\n          }\n        }, question.audio?.playTime * 1000);\n        return () => clearTimeout(timeout);\n      } else {\n        startCountdown();\n      }\n    }\n  }, [isPlaying, question.audio, startCountdown, isPlayingFirstTime]);\n\n  return (\n    <>\n      <h1>{question.questionHeader}</h1>\n      <p dangerouslySetInnerHTML={{ __html: question.questionText }}></p>\n      {question.optionsValues && (\n        <ul>\n          {shuffle([...question.optionsValues]).map((val) => (\n            <li key={val}>{val}</li>\n          ))}\n        </ul>\n      )}\n      {question.image && <Image src={question.image}></Image>}\n      {question.questionEndText && (\n        <p dangerouslySetInnerHTML={{ __html: question.questionEndText }}></p>\n      )}\n      {question.audio && (\n        <>\n          <audio ref={audioRef} onCanPlayThrough={() => setPlaying(true)}>\n            <source\n              src={question.audio.src}\n              type={\"audio/\" + question.audio.type}\n            ></source>\n          </audio>\n          <Button onClick={() => setPlaying(true)} disabled={isPlaying}>\n            Ja okay, dann halt nochmal...\n          </Button>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default QuestionRenderer;\n","import React from \"react\";\nimport styled, { keyframes } from \"styled-components\";\n\ninterface ITimerProps {\n  remaining: number;\n  total: number;\n}\n\ninterface IClockProps {\n  circumference: number;\n  offset: number;\n}\n\nconst Svg = styled.svg`\n  width: 200px;\n  height: 200px;\n`;\n\nconst Circle = styled.circle<IClockProps>`\n  stroke: #e83151;\n  stroke-width: 4;\n  stroke-linecap: round;\n  stroke-dasharray: ${({ circumference }) =>\n    `${circumference} ${circumference}`};\n  stroke-dashoffset: ${({ offset }) => offset};\n  transition: stroke-dashoffset 0.2s;\n  transform: rotate(-90deg);\n  transform-origin: 50% 50%;\n  fill: transparent;\n`;\n\nconst blink = keyframes`\nfrom {\n    opacity: 1;\n}\n\n50% {\n    opacity: 0;\n}\n\nto {\n    opacity: 1;\n}\n`;\n\nconst DoneCircle = styled.circle`\n  stroke: #e83151;\n  stroke-width: 4;\n  animation: ${blink} 1s linear infinite;\n  fill: transparent;\n`;\n\nconst Text = styled.text`\n  text-anchor: middle;\n`;\n\nconst Timer: React.FC<ITimerProps> = ({ remaining, total }) => {\n  const circumference = 46 * 2 * Math.PI;\n\n  const circle =\n    remaining > 0 ? (\n      <Circle\n        r={46}\n        cx={50}\n        cy={50}\n        circumference={circumference}\n        offset={circumference - (remaining / total) * circumference}\n      ></Circle>\n    ) : (\n      <DoneCircle r={46} cx={50} cy={50}></DoneCircle>\n    );\n\n  return (\n    <Svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n      {}\n      {circle}\n      <Text x={50} y={50} alignmentBaseline={\"middle\"} dominantBaseline={\"middle\"}>\n        {remaining}s\n      </Text>\n    </Svg>\n  );\n};\n\nexport default Timer;\n","import React, { useEffect, useState } from \"react\";\nimport Timer from \"./timer\";\n\ninterface ITimerControlProps {\n  countdownFrom: number;\n}\n\nconst TimerControl: React.FC<ITimerControlProps> = ({ countdownFrom }) => {\n\n    const [remainingTime, setRemainingTime] = useState(countdownFrom);\n\n    useEffect(() => {\n        if (remainingTime <= 0) {\n          return;\n        }\n        const timer = setInterval(() => {\n          setRemainingTime(rt => rt - 1);\n        }, 1000);\n        return () => clearInterval(timer);\n      });\n\n  return (\n    <Timer total={countdownFrom} remaining={remainingTime}></Timer>\n  );\n};\n\nexport default TimerControl;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Player, Quiz } from \"../models\";\nimport { RoundContext } from \"../round-context\";\nimport AddPlayerButton from \"./add-player\";\nimport { Button, PrimaryButton } from \"./button\";\nimport Greeting from \"./greeting\";\nimport PlayerDisplay from \"./player\";\nimport QuestionRenderer from \"./question\";\nimport TimerControl from \"./timer-control\";\n\nconst TimerContent = styled.div`\n  grid-column-start: 1;\n  grid-column-end: 2;\n  justify-self: center;\n`;\n\nconst NavContent = styled.div`\n  grid-column-start: 1;\n  grid-column-end: 2;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 10px;\n  padding-left: 10px;\n`;\n\nconst PlayerContent = styled.div`\n  grid-column-start: 1;\n  grid-column-end: 2;\n  padding-left: 10px;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 60px;\n`;\n\nconst MainContent = styled.div`\n  grid-column-start: 2;\n  grid-column-end: 4;\n  grid-row-start: 2;\n  grid-row-end: 5;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nfunction loadPlayers(): Player[] {\n  const playersStringFromLocalStorage = window.localStorage.getItem(\"players\");\n  if (!playersStringFromLocalStorage) {\n    return [];\n  }\n  try {\n    return JSON.parse(playersStringFromLocalStorage);\n  } catch (e) {\n    console.error(e);\n    return [];\n  }\n}\n\nconst PubQuiz: React.FC<{quiz: Quiz}> = ({quiz}) => {\n  const [round, setRound] = useState(-1);\n\n  const [players, setPlayers] = useState(loadPlayers());\n\n  const [countdownFrom, setCountdownFrom] = useState<number | undefined>(undefined);\n\n  const addPlayer = (player: Player) => {\n    const sortedPlayers = [...players, player].sort((a, b) => b.score - a.score);\n    setPlayers(sortedPlayers);\n    window.localStorage.setItem(\"players\", JSON.stringify(sortedPlayers));\n  }\n\n  const modifyScore = (player: Player, diff: number) => {\n    player.score += diff;\n    player.modifiedThisRound = true;\n    const sortedPlayers = [...players].sort((a, b) => b.score - a.score);\n    setPlayers(sortedPlayers);\n    window.localStorage.setItem(\"players\", JSON.stringify(sortedPlayers));\n  }\n\n  const nextRound = () => {\n    setRound(r => r + 1);\n    setCountdownFrom(undefined);\n    setPlayers(ps => {\n      const newPlayers = [...ps];\n      newPlayers.forEach(p => p.modifiedThisRound = false);\n      return newPlayers;\n    });\n    window.localStorage.setItem(\"players\", JSON.stringify(players));\n  }\n\n  const previousRound = () => {\n    setRound(r => r - 1);\n    setCountdownFrom(undefined);\n    setPlayers(ps => {\n      const newPlayers = [...ps];\n      newPlayers.forEach(p => p.modifiedThisRound = false);\n      return newPlayers;\n    });\n    window.localStorage.setItem(\"players\", JSON.stringify(players));\n  }\n\n  const startCountdown = () => {\n    if (round >= 0 && round < quiz.questions.length) {\n      setCountdownFrom(quiz.questions[round].timerCountdown)\n    } else {\n      setCountdownFrom(undefined);\n    }\n  }\n\n  return (\n    <RoundContext.Provider value={round}>\n      <TimerContent>\n        {countdownFrom && <TimerControl countdownFrom={countdownFrom} key={\"TimerControlForRound\" + round}></TimerControl>}\n      </TimerContent>\n      <NavContent>\n        <Button onClick={previousRound} disabled={round < 0}>&lt; Zurück</Button>\n        <PrimaryButton onClick={nextRound} disabled={round >= quiz.questions.length - 1}>Weiter &gt;</PrimaryButton>\n      </NavContent>\n      <PlayerContent>\n        <div style={{overflow: \"scroll\", maxHeight: \"calc(100vh - 430px)\"}}>\n          {players.map((player) => (\n            <PlayerDisplay key={\"Player\" + player.name} player={player} incrementScore={() => modifyScore(player, 1)} decrementScore={() => modifyScore(player, -1)}></PlayerDisplay>\n          ))}\n        </div>\n        <AddPlayerButton addPlayer={addPlayer}></AddPlayerButton>\n      </PlayerContent>\n      <MainContent>\n        {round < 0 || round >= quiz.questions.length ? <Greeting {...quiz.greeting}></Greeting> : <QuestionRenderer question={quiz.questions[round]} startCountdown={startCountdown}></QuestionRenderer>}\n      </MainContent>\n    </RoundContext.Provider>\n  );\n};\n\nexport default PubQuiz;\n","import React, { useCallback, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport styled from \"styled-components\";\nimport { brandColor } from \"../colors\";\nimport { Quiz } from \"../models\";\n\ninterface IQuizLoaderProps {\n  loadedQuiz: (quiz: Quiz) => void;\n}\n\nconst LoaderContainer = styled.div`\n  grid-column-start: 1;\n  grid-column-end: 4;\n  grid-row-start: 2;\n  grid-row-end: 5;\n  padding: 20px;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 60px 1fr;\n`;\n\nconst LoaderBox = styled.div<{dragging: boolean}>`\n  flex: 1;\n  border: 5px dashed ${brandColor};\n  border-radius: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  background-color: ${({dragging}) => dragging ? \"#eff7ff\" : \"white\"};\n  transition: background-color 200ms linear;\n`;\n\nconst StatusMessage = styled.div`\nfont-size: 18pt;\ntext-align: center;\n`\n;\nconst QuizLoader: React.FC<IQuizLoaderProps> = ({ loadedQuiz }) => {\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    if (acceptedFiles.length !== 1) {\n        setMessage(\"Bitte wähle genau eine Datei aus!\");\n        return;\n    }\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n\n    reader.onabort = (e) => {\n        console.log(e);\n        setMessage(\"Datei konnte nicht gelesen werden!\");\n    }\n    reader.onerror = (e) => {\n        console.log(e);\n        setMessage(\"Datei konnte nicht gelesen werden!\");\n    }\n    reader.onload = () => {\n        const jsonString = reader.result;\n        try {\n            const quiz = JSON.parse(jsonString as any); // fuck it, we catch all\n            loadedQuiz(quiz);\n        } catch (e) {\n            console.log(e);\n            setMessage(\"Datei ist fehlerhaft!\");\n        }\n    }\n    reader.readAsText(file);\n  }, [loadedQuiz]);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  const [message, setMessage] = useState(\"Lade dein Quiz, um zu beginnen!\");\n  return <LoaderContainer>\n      <StatusMessage>{message}</StatusMessage>\n    <LoaderBox {...getRootProps()} dragging={isDragActive}>\n      <input {...getInputProps()} />\n      {\n        isDragActive ?\n          <p>Ab jetzt gerne loslassen ;) ...</p> :\n          <p>Ziehe dein Quiz hier hin oder klicke, um es auszuwählen</p>\n      }\n    </LoaderBox>\n\n  </LoaderContainer>;\n};\n\nexport default QuizLoader;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { AppHeader } from \"./components/header\";\nimport PubQuiz from \"./components/pubquiz\";\nimport QuizLoader from \"./components/quiz-loader\";\nimport { Quiz } from \"./models\";\n\nconst subtitles = [\n  \"Der ultimative Spaß für jedes Team\",\n  \"Sogar von Agile Coaches bedienbar! :-P\",\n  \"Für jede falsche Antwort trinkt Wiebke einen Kurzen!\",\n  \"Findet ihr Timeboxes immer noch super, wenn ihr die Fragen beantworten müsst?\",\n  \"Pro-Tipp: Drücke Alt+F4, um den Text der aktuellen Frage bei Google zu suchen\"\n];\n\nconst MainGrid = styled.div`\n  display: grid;\n  grid-template-rows: 80px 200px 60px 1fr;\n  grid-template-columns: 300px 1fr;\n  gap: 10px;\n  width: 100vw;\n  height: 100vh;\n`;\n\n\nconst App: React.FC<{}> = () => {\n\n  const [quiz, setQuiz] = useState<Quiz | undefined>(undefined);\n\n  return (\n    <MainGrid>\n      <AppHeader title=\"Ultimate Pub Quiz\" subtitles={subtitles}></AppHeader>\n      {quiz && <PubQuiz quiz={quiz}></PubQuiz>}\n      {!quiz && <QuizLoader loadedQuiz={setQuiz}></QuizLoader>}\n    </MainGrid>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}